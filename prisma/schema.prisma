// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User & Authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Product Management
model Product {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  sku         String?  @unique
  inventory   Int      @default(0)
  status      ProductStatus @default(DRAFT)
  seoTitle    String?
  seoDescription String?
  slug        String   @unique
  images      Json?    // Array of image URLs
  variants    Json?    // Product variants (size, color, etc.)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  collections   ProductCollection[]

  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  image       String?
  parentId    String?
  parent      Category? @relation("CategoryTree", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryTree")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Collection {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  image       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products ProductCollection[]

  @@map("collections")
}

model ProductCollection {
  productId    String
  collectionId String
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@map("product_collections")
}

// Order Management
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  subtotal    Decimal     @db.Decimal(10, 2)
  tax         Decimal     @db.Decimal(10, 2)
  shipping    Decimal     @db.Decimal(10, 2)
  currency    String      @default("EUR")
  
  // Customer info
  customerEmail String
  customerPhone String?
  
  // Billing Address
  billingName    String
  billingAddress String
  billingCity    String
  billingZip     String
  billingCountry String
  
  // Shipping Address
  shippingName    String?
  shippingAddress String?
  shippingCity    String?
  shippingZip     String?
  shippingCountry String?
  
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String?
  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  title     String
  variant   Json?   // Selected variant options

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Page Builder & CMS
model Page {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     Json?     // Page builder content
  published   Boolean   @default(false)
  seoTitle    String?
  seoDescription String?
  template    String?   // Page template type
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("pages")
}

model Theme {
  id          String   @id @default(cuid())
  name        String
  isActive    Boolean  @default(false)
  settings    Json     // Theme configuration (colors, fonts, etc.)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("themes")
}

model Navigation {
  id        String   @id @default(cuid())
  name      String
  handle    String   @unique
  items     Json     // Navigation structure
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("navigations")
}

// Settings & Configuration
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  group     String?  // Group settings together
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  CUSTOMER
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
